# Structure des projets {#code-quality}

## Tâches concernées et recommandations

Blabla

::: {.callout-recommandation .icon}

blabla
:::

Cette partie détaille de manière plus étendue les éléments enseignés
dans le cadre d'une formation aux bonnes pratiques 
construite par l'Insee et dont les supports ont été ouverts à 
[cette adresse](https://inseefrlab.github.io/formation-bonnes-pratiques-R/#/title-slide).


## Enjeux

On peut comparer la structure d'un projet à l'organisation d'un bureau. 
Si ce dernier est désordonné, il est très difficile de dissocier les dossiers
et de ne pas prendre beaucoup de temps, voire abandonner toute recherche, 
lorsqu'il est nécessaire d'en retrouver un. A l'inverse, un bureau bien
organisé, et au sein de ce bureau des dossiers bien rangés, faciliteront
la recherche d'information. Le bon fonctionnement d'un projet informatique
est identique. Un projet bien structuré, avec une organisation sensée, 
améliorera la lisibilité du projet ainsi que sa maintenabilité. 

Prenons l'organisation suivante, à ne pas reproduire: 

```
├── report.Rmd
├── correlation.png
├── data.csv
├── data2.csv
├── fig1.png
├── figure 2 (copy).png
├── report.pdf
├── partial data.csv
├── script.R
└── script_final.R
```

Source : [eliocamp.github.io](https://eliocamp.github.io/reproducibility-with-r/materials/day1/02-projects/)

Il est très difficile, sans une documentation claire sur l'organisation
du projet, de comprendre la hiérarchie des scripts, de séparer les 
bases qui sont en entrées de celles produites par le code, d'être certain
que toutes les productions sont issues du code et non de copier-coller manuels
et d'être certain que toutes les productions ont été faites à partir de la 
dernière version du code. 


Comme pour le rangement d'un bureau, la méthode
la plus efficace n'est pas d'attendre que la situation devienne ingérable
mais d'organiser en continu le projet. `Git` est un outil qui favorise
cette bonne pratique, puisqu'il évite la duplication des fichiers, mais
il ne s'agit pas d'un outil miraculeux. 
Il est donc recommandé d'adopter des conventions, assez similaires à celles
proposées dans la fiche [Qualité du code](#code-quality). 
par exemple l'autodocumentation par 
des conventions de nommage cohérentes et l'organisation du projet dans des noms
de dossiers logiques
pour permettre à d'autres de comprendre l'objectif d'un projet, 
sa structure et ses productions. 

Les principes généraux sont les suivants, détaillés dans les parties qui 
suivent:

1. Utiliser les projets RStudio ;
2. Organiser son projet en sous-dossiers ;
3. Donner des noms pertinents aux fichiers et dossiers ;
4. Documenter son projet.

## Utiliser les projets RStudio

Une [fiche détaillée](#rproject) est consacrée aux projets `RStudio`.
Les principaux avantages des projets `RStudio` sont les suivants:

  - Tous les fichiers nécessaires au projet dans un même dossier ;
  - Le dossier contenant le projet RStudio est automatiquement utilisé comme ***working directory*** ;
  - Utilisation de [**chemins relatifs**]{.blue2} plutôt qu'absolus.

Cela peut aider à éviter les problèmes de chemin lors de la reprise du projet sur un autre ordinateur ou avec une autre personne. 

Si vous suivez le mode opératoire pour l'utilisation de `Git` dans `RStudio`
détaillé dans la [fiche dédiée](#Fiche_git_utilisation), vous êtes assuré
de travailler dans un projet `RStudio`.

## Organiser son projet en sous-dossiers

Comme toute convention, toute structure de dossier comporte une certaine
forme d'arbitraire et il n'apparaît pas toujours évident de considérer
qu'une règle d'organisation est plus légitime qu'une autre. Il est plus important
de chercher des structures lisibles et cohérentes, admises par une communauté
large de praticiens d'un langage. 

Pour reprendre l'exemple précédent, une structure déjà plus lisible
est la suivante:

```
├── data
│   ├── raw
│   │   ├── data.csv
│   │   └── data2.csv
│   └── derived
│       └── partial data.csv
├── scripts
│   └── script.R
├── analysis
│   ├── script_final.R
│   └── report.Rmd
└── output
    ├── fig1.png
    ├── figure 2 (copy).png
    ├── figure10.png
    ├── correlation.png
    └── report.pdf
```
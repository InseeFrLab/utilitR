# Qualit√© du code {#code-quality}

## T√¢ches concern√©es et recommandations

Blabla

::: {.callout-recommandation .icon}
Blabla
:::

Cette partie d√©taille de mani√®re plus √©tendue les √©l√©ments enseign√©s
dans le cadre d'une formation aux bonnes pratiques 
construite par l'Insee et dont les supports ont √©t√© ouverts √† 
[cette adresse](https://inseefrlab.github.io/formation-bonnes-pratiques-R/#/title-slide).


## Enjeux


Lors de l'apprentissage d'un langage, il est assez naturel de voir le code d‚Äôune mani√®re tr√®s fonctionnelle : on d√©sire r√©aliser une t√¢che donn√©e ‚Äî par exemple nettoyer des champs textuels ‚Äî et
on va donc assembler dans un script des bouts de code, souvent trouv√©s sur internet, jusqu‚Äô√† obtenir un projet qui r√©alise la t√¢che voulue.
La structure du projet importe assez peu, tant qu‚Äôelle permet d‚Äôimporter et traiter les donn√©es n√©cessaires √† la t√¢che en question.

Si cette approche flexible et minimaliste fonctionne tr√®s bien lors de la phase d‚Äôapprentissage, il est malgr√© tout indispensable de s‚Äôen d√©tacher progressivement √† mesure qu‚Äôon progresse et que l‚Äôon peut √™tre amen√© √† r√©aliser des projets collaboratifs ou amen√©s √† durer dans le temps.

Lorsqu'on travaille avec R, il est important de consid√©rer
le code non seulement comme un outil pour effectuer des t√¢ches,
mais aussi comme un __moyen de communiquer__
nos m√©thodes et r√©sultats √† d'autres personnes.
En adoptant des bonnes pratiques, on am√©liore la lisibilit√©
et la compr√©hension d'un code, ce qui facilite la collaboration avec
les r√©utilisateurs du code mais aussi aupr√®s de publics, comme les
chercheurs, d√©sirant 
comprendre les traitements mis en oeuvre.

La __lisibilit√©__ et la __maintenabilit√©__ du code
sont des aspects cl√©s pour assurer la qualit√© d'un projet statistique.
Les bonnes pratiques aident √† √©crire du code clair et structur√©, ce qui fait gagner du temps pour s'approprier un code, corriger des erreurs ou apporter des modifications √† un code.
Un code √©tant plus souvent lu qu'√©crit[^1]

[^1]: Cette phrase tr√®s connue est une citation de Guido Van Rossum, le cr√©ateur
de `Python`. `R` comme `Python` tous deux des langages con√ßus pour √™tre plus
transparents que des langages bas niveaux comme `C`. 

La __r√©utilisation__ d'un code ou de productions associ√©es √† du code,
comme des bases
de donn√©es, peut √™tre grandement facilit√©e en adoptant des bonnes pratiques.


Gr√¢ce aux bonnes pratiques, nous pouvons nous assurer que notre
travail est __transparent__ et facilement __v√©rifiable__.
Cette exigence de reproductibilit√©, notion centrale dans le domaine de la recherche
scientifique, s'applique √©galement
dans d'autres domaines o√π la transparence m√©thodologique est cruciale pour la validit√© et la fiabilit√© des r√©sultats. Un code de qualit√© facilite ainsi 
la v√©rification et la reproduction de nos r√©sultats par d'autres personnes.
A l'image du processus de revue par les pairs (_peer review_)
dans le domaine scientifique,
se d√©veloppent des revues de code (_code review_) qui favorisent la production
d'un code de qualit√©. 


## Adopter les standards communautaires

### Enjeux

> *"Good coding style is like correct punctuation: you can manage without it, butitsuremakesthingseasiertoread"*

>
> [Tidyverse Style Guide](https://style.tidyverse.org/)

Tout comme la correction de la ponctuation peut rendre un texte plus facile √† lire,
une bonne pratique de codage peut rendre notre code plus facile √† comprendre
√† maintenir et √† r√©utiliser.

Il est √©galement important de respecter les conventions du langage dans lequel le code est r√©dig√©. Cela peut inclure des normes de formatage telles que l'indentation et la mise en forme, ainsi que des conventions de nommage telles que les noms de variables et de fonctions. En utilisant les conventions standardis√©es du langage, nous pouvons rendre notre code plus coh√©rent et plus facile √† comprendre pour les autres personnes travaillant dans ce langage.

Il existe deux guides de r√©f√©rence qui exposent les conventions de la communaut√©
`R` concernant la qualit√© du code :
le [_`Tidyverse` style guide_](https://style.tidyverse.org/) et
le [_`Google` style guide_](https://google.github.io/styleguide/Rguide.html).
Ce guide propose des conseils sur la fa√ßon d'√©crire du code clair et structur√© en utilisant les bonnes pratiques recommand√©es pour le langage R. Il peut √™tre utile de se r√©f√©rer √† ce guide pour s'assurer d'adopter des bonnes pratiques en mati√®re de codage en R.

. . .

- Respecter les [conventions]{.orange} du langage dans lequel il est r√©dig√©

. . .

- Il existe un **guide de r√©f√©rence** pour bien coder en `R` : le [Tidyverse style guide](https://style.tidyverse.org/index.html).


## :one: Adopter les standards communautaires {.smaller}

Deux outils pratiques aident √† respecter les standards :

1. [**_linter_**]{.orange} : programme qui v√©rifie que le code est __formellement__ conforme √† un certain _guidestyle_
    + signale probl√®mes formels, sans corriger 

. . .

2. [**_formatter_**]{.orange} : programme qui reformate un code pour le rendre conforme √† un certain _guidestyle_
    + modifie directement le code

. . .

::: {.callout-tip}

- [Exemples d‚Äôerreurs rep√©r√©es]{.blue2} par un _linter_ : 
    + lignes de code trop longues ou mal indent√©es, parenth√®ses non √©quilibr√©es, noms de fonctions mal construits‚Ä¶
- [Exemples d‚Äôerreurs __non__ rep√©r√©es]{.blue2} par un _linter_ :
    + fonctions mal utilis√©es, arguments mal sp√©cifi√©s, structure du code incoh√©rente, code insuffisamment document√©‚Ä¶
:::


<!--------- VERSION SITE WEB 
1. Un [**_linter_**]{.orange} est un programme qui v√©rifie que le code est __formellement__ conforme √† un certain _guidestyle_, et signale les erreurs. En revanche, un _linter_ ne modifie pas directement le code et ne rep√®re pas les erreurs de fond.

  &#8627; Exemples d‚Äôerreurs rep√©r√©es par un _linter_ : lignes de code trop longues ou mal indent√©es, parenth√®ses non √©quilibr√©es, noms de fonctions mal construits‚Ä¶
  &#8627; Exemples d‚Äôerreurs __non__ rep√©r√©es par un _linter_ : fonctions mal utilis√©es, arguments mal sp√©cifi√©s, structure du code incoh√©rente, code insuffisamment document√©‚Ä¶
. . .

2. Un [**_formatter_**]{.orange} est un programme qui reformate un code source pour le rendre conforme √† un certain _guidestyle_. Par d√©finition, un _formatter_ modifie directement le code.
-------->

## :one: Adopter les standards communautaires {.smaller}

<br>

Dans le cas de {{< fa brands r-project >}} : 

- le [_linter_]{.orange} √† utiliser est le _package_ [`lintr`](https://github.com/r-lib/lintr);
- le [_formatter_]{.orange} √† utiliser est le _package_ [`styler`](https://github.com/r-lib/styler).
    + Existe √©galement le _package_ [`formatR`](https://github.com/yihui/formatR).

## :two: Utiliser des fonctions {.smaller}

::: {.callout-important}
## R√®gle d'or

Il faut utiliser une [**fonction**]{.red2} d√®s qu'on utilise une m√™me
portion de code plus de deux fois ([**_don't repeat yourself_ (DRY)**]{.red2})
:::

- [Limite les risques d'erreurs]{.orange} li√©s aux copier/coller
- Rend le code [plus lisible]{.orange} et [plus compact]{.orange}
- [Un seul endroit]{.orange} du code √† modifier lorsqu'on souhaite modifier le traitement
- Facilite la [r√©utilisation]{.orange} et la [documentation]{.orange} du code !

. . .

::: {.callout-tip}
## R√®gles pour √©crire des fonctions **pertinentes**

- Une t√¢che = une fonction ;
- Une t√¢che complexe = un encha√Ænement de fonctions r√©alisant chacune une t√¢che simple ;
- Limiter l'utilisation de variables globales.

:::

## :three: Documenter son code

- Grands principes :
  - Documenter le [__pourquoi__]{.orange} plut√¥t que le [__comment__]{.orange} ;
  - Privil√©gier l'auto-documentation via des [**nommages pertinents**]{.orange}.

. . .

::: {.callout-tip}
## Comment bien documenter un script ?

- [**Minimum**]{.orange} üö¶ : commentaire au d√©but du script pour d√©crire ce qu'il fait ;
- [**Bien**]{.orange} üëç : commenter les parties "d√©licates" du code ;
- [**Id√©al**]{.orange} üí™ : documenter ses fonctions avec la syntaxe `roxygen2`.

:::


## :four: Pas d'ambigu√Øt√© sur les _packages_ utilis√©s {.smaller}

- Deux fonctions peuvent avoir le [__m√™me nom__]{.orange} dans des [__packages diff√©rents__]{.orange}

. . .

- `R` utilise par d√©faut la librairie charg√©e le plus r√©cemment

. . .

- Erreurs difficiles √† rep√©rer car il est n√©cessaire d'ex√©cuter le code

. . .

- Recommandation : indiquer explicitement le _package_ : notation `package::fonction()`
    + Exemple : `dplyr::filter()`

:::{.callout-tip}
## Exemple
- `package1` et `package2` contiennent chacun une fonction appel√©e `superFonction`.
- Si `package2` est charg√© apr√®s `package1`, alors `superFonction` d√©signe par d√©faut la fonction de `package2`.
- Mieux vaut noter `package1::superFonction` et `package2::superFonction`
:::


<!------ Pour la version blog

Des packages contenant des fonctions homonymes peuvent √™tre √† l‚Äôorigine de conflits. Ceci est d√ª au fait que R utilise par d√©faut la fonction du package charg√© le plus r√©cemment.

    Exemple: si les packages package1 et package2 contiennent chacun une fonction appel√©e superFonction, et si package2 est charg√© apr√®s package1, alors superFonction d√©signe par d√©faut la fonction de package2.

Cette ambigu√Øt√© peut entra√Æner des erreurs difficiles √† rep√©rer, car le code donne l‚Äôimpression d‚Äôappeler la bonne fonction. C‚Äôest pourquoi il est recommand√© d‚Äôindiquer explicitement le package utilis√© en utilisant la notation package::fonction() (par exemple dplyr::filter()).

:::{.callout-tip}
## Le_package_[`conflicted`](https://github.com/r-lib/conflicted#conflicted)

Le_package_`conflicted` aide √† g√©rer les conflits de_packages_de mani√®re fluide.
:::
------>


## Ressources suppl√©mentaires

<br>

- [_R Packages_](https://r-pkgs.org/man.html) par Hadley Wickham and Jenny Bryan
- Une [pr√©sentation tr√®s bien faite](https://mitmat.github.io/slides/2022-05-26-egu/code-data-open-science.html#1)
- [Un cours complet](https://eliocamp.github.io/reproducibility-with-r/) sur la reproductibilit√© avec `R`
- L'√©quivalent `Python` en [3A d'ENSAE](https://ensae-reproductibilite.netlify.app/about/)


## Exercices
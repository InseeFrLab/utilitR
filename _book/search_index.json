[
["index.html", "InseeR: comment travailler avec R à l’Insee? Chapter 1 A compléter", " InseeR: comment travailler avec R à l’Insee? Insee 2020-03-11 Chapter 1 A compléter "],
["intro.html", "Chapter 2 Introduction 2.1 Informations issues de la doc de bookdown", " Chapter 2 Introduction On va faire une documentation hyper complète. 2.1 Informations issues de la doc de bookdown You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 2. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter ??. Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 2.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 2.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 2.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 2.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2020) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). References "],
["travailler-avec-r-à-linsee.html", "Chapter 3 Travailler avec R à l’Insee 3.1 Fiche démarrage rapide 3.2 Présentation de l’environnement logiciel 3.3 Comment utiliser R et Rstudio à l’Insee? 3.4 Comment utiliser Git avec R? 3.5 Comment travailler à plusieurs avec Gitlab? 3.6 D’autres idées plus avancées", " Chapter 3 Travailler avec R à l’Insee Commentaire OM: Chacune de ces titres aurait vocation à être une section à part entière, et non une sous-section. Je les laisse comme ça pour permettre une lecture facile du plan. 3.1 Fiche démarrage rapide Quelques idées en vrac: où clique-t-on pour accéder à Rstudio? Où se trouve le Gitlab? Comment on se crée une librairie avec des droits en écriture? Comment on installe un package? Cette fiche démarrage rapide pourrait/devrait être la première section de la partie faire du R à l’Insee. Elle recoupe peut-être partiellement la partie sur la présentation de l’environnement logiciel. 3.2 Présentation de l’environnement logiciel Présentation succincte des outils à l’attention des novices (en un petit tableau): R, Rstudio, git, Gitlab, Rtools, Rmarkdown… 3.3 Comment utiliser R et Rstudio à l’Insee? 3.3.1 Où faire du R à l’Insee Comment on se connecte à AUS; Comment on lance Rstudio. Reprendre et adapter la partie projets collaboratifs avec R de la formation Travail Collaboratif sous R. 3.3.2 Comment personnaliser sa configuration R et Rstudio sous AUS? Parler du fichier .Rprofile, et dire ce qui peut être configuré. 3.3.3 Comment installer des packages? Comment on se crée une librairie avec des droits en écriture? Expliquer le fonctionnement des miroirs à l’Insee. 3.4 Comment utiliser Git avec R? 3.4.1 Des bases de Git Reprendre la partie 4.2 de la formation Travail Collaboratif sous R. 3.4.2 Où mettre son dépôt local Git 3.4.3 Utiliser Git l’interface Rstudio 3.5 Comment travailler à plusieurs avec Gitlab? 3.5.1 Présentation du Gitlab interne 3.5.2 Configurer son accès à Gitlab (SSH, Putty etc.) Reprendre la partie 4.4 de la formation Travail Collaboratif sous R. 3.5.3 Travailler avec Gitlab Les issues, les branches, les merge requests. Reprendre la partie 4.3 de la formation Travail Collaboratif sous R. 3.5.4 Les bonnes pratiques avec Git et Gitlab Reprendre la partie 4.5 de la formation Travail Collaboratif sous R. 3.6 D’autres idées plus avancées Comment utiliser l’intégration continue sur Gitlab. Comment développer des packages en R à l’Insee (reprendre la partie 7 de la formation Travail Collaboratif sous R) "],
["importer-des-fichiers-plats-csv-tsv-txt.html", "Chapter 4 Importer des fichiers plats (.csv, .tsv, .txt) 4.1 Tâches concernées et recommandations 4.2 Importer des fichiers plats de taille limitée: le package readr 4.3 Importer des fichiers plats de grande taille: la fonction fread() du package data.table 4.4 Bonnes pratiques 4.5 Ressources", " Chapter 4 Importer des fichiers plats (.csv, .tsv, .txt) 4.1 Tâches concernées et recommandations L’utilisateur souhaite importer dans R des données stockées sous forme de fichiers plats (formats .txt, .csv, .tsv). ::: recommandation Recommandations de l’Insee Pour importer des données de taille réduite (jusqu’à 1 Go), il est recommandé d’utiliser les fonctions read_csv() et read_delim() du package readr; Pour importer des données de taille plus importante (supérieure à 1 Go), il est recommandé d’utiliser la fonction fread() du package data.table. L’usage du package csvread est déconseillé, de même que l’utilisation des fonctions natives de R read.csv() et read.delim(). ::: 4.2 Importer des fichiers plats de taille limitée: le package readr Le package readr propose plusieurs fonctions adaptées pour importer des fichiers plats de taille limitée (moins de 1 Go): read_csv() : lecture d’un csv délimité par des virgules, avec un point comme marqueur décimal; read_csv2() : lecture d’un csv séparé par des points-virgules, avec une virgule comme marqueur décimal; read_delim() : fonction plus générale et paramétrable, pour lire des fichiers délimités. Il faut charger le package readr pour utiliser ces fonctions: {r} library(readr). ::: conseil Conseils Si vous êtes débutants en R, il est recommandé d’utiliser l’utilitaire d’importation de Rstudio. Une fois que les données sont correctement importées, vous pouvez copier-coller le code dans votre script R. Si vous connaissez déjà R, vous pouvez utiliser directement les fonctions du package readr, de préférence read_csv() ou read_csv2(). ::: ::: remarque Remarque Les fonctions du package readr importent toutes les colonnes d’un fichier plat. Elles ne permettent donc pas d’importer uniquement certaines colonnes. Si vous avez besoin de pouvoir sélectionner les colonnes, utilisez plutôt data.table. ::: 4.2.1 Utiliser l’assistant d’importation Rstudio Pour les utilisateurs débutants, Rstudio propose une interface graphique très commode pour importer des fichiers plats avec readr. On y accède avec: File &gt; Import Dataset &gt; From text (readr).... On obtient la fenêtre suivante. En cliquant sur Browse (rectangle rouge), on peut définir le chemin du fichier que l’on souhaite importer. Une fois que le fichier à importer a été sélectionné, un aperçu des premières lignes du fichier s’affiche dans la fenêtre. Dans l’exemple ci-dessous, on essaie d’importer le fichier des communes du Code Officiel Géographique (version 2019). La fenêtre comprend deux panneaux très utiles: Un panneau qui permet de définir les options d’importation (rectangle orange); Un panneau qui donne le code qui réalise l’importation demandée (rectangle vert). Les principales options d’importation comprennent notamment: Name: Le nom du data.frame dans lequel les donnée seront stockées; First Row as Names: à cocher si la première ligne contient les noms de colonnes; Delimiter: Indique le délimiteur des données. Pour mémoire: Comma = virgule, Semicolon = point virgule, Tab = tabulation, Whitespace = espace, Other... = autre (à définir); Locale...: définit les options locales d’importation, notamment l’encodage et le marqueur décimal qui sont des sources récurrentes de problèmes; NA: indique la valeur retenue lorsqu’une valeur est manquante. Enfin, il est possible de modifier le type des données en cliquant sur la petite flèches à côté de l’en-tête de colonne (flèches noires). 4.2.2 Utiliser read_csv() et read_csv2() Les fonctions read_csv() et read_csv2() sont des fonctions d’importation spécialement conçues pour les fichiers .csv. Ces deux fonctions sont identiques, sauf sur deux points: la fonction read_csv() suppose par défaut que le séparateur est une virgule, et que le marqueur décimal est un point. La fonction read_csv2() suppose par défaut que le séparateur est un point-virgule, et que le marqueur décimal est une virgule. Voici les principales options de read_csv() et de read_csv2(): Argument Valeur par défaut Fonction file Aucune Le chemin du fichier à importer col_names TRUE La première ligne contient-elle les noms de colonne? col_types NULL Définir le type des variables skip 0 Sauter les n premières lignes (0 par défaut) n_max Inf Nombre maximum de lignes à importer (pas de limite par défaut) locale Réglages locaux (encodage, marqueur décimal…) Par défaut, la fonction read_csv() tente de deviner le type des variables (integer pour les nombres entiers, double pour les nombres décimaux, character pour les chaînes de caractères…). Toutefois, il peut arriver que vous souhaitiez préciser le type des variables lorsque le comportement par défaut ne convient pas. Pour cela, il faut utiliser l’option col_types et construire donnant le type de la variable considérée. On écrit: nom_variable1 = col_integer() pour imposer le type integer, nom_variable2 = col_character() pour impose le type character, etc. Dans l’exemple qui suit, on veut importer le fichier des communes du code officiel géographique (version 2019, disponible ici), en déclarant que le fichier est encodé en UTF-8 et en imposant que le code commune soit lu comme une chaîne de caractères et le code région comme un nombre entier. On écrit le code suivant: library(readr) communes &lt;- read_csv(&quot;D:/K2KFED/communes-01012019.csv&quot;, locale = locale(encoding =&quot;UTF-8&quot;), col_types = c(com = col_character(), reg = col_integer()) ) 4.2.3 Utiliser la fonction read_delim() La fonction read_delim() est faite pour lire toutes sortes de fichiers plats, et propose de nombreuses options pour l’adapter au fichier considéré. Elle est puissante, mais plus difficile à utiliser que les fonctions read_csv() et read_csv2(), qui sont des versions simplifiées de read_delim(). En pratique, ces deux fonctions sont le plus souvent suffisantes, et il est rare d’avoir vraiment besoin d’utiliser read_delim(). La fonction read_delim() propose les mêmes options que read_csv() et read_csv2(), avec deux ajouts principaux: delim: le délimiteur du fichier plat; escape_backslash (TRUE/FALSE): les caractères spéciaux du fichier plat ont-ils un échappement (\\)? Pour en savoir plus sur read_delim(), il suffit de consulter l’aide avec ?read_delim. 4.3 Importer des fichiers plats de grande taille: la fonction fread() du package data.table Le package data.table permet d’importer des fichiers plats avec la fonction fread(). Cette fonction présente trois avantages: Elle est très rapide (nettement plus que les fonctions du package readr); Elle permet de sélectionner les colonnes qu’on veut importer (option select); Elle propose un grand nombre d’options, adaptées pour les usages avancées. Pour utiliser fread(), il faut charger le package data.table: library(data.table) Les principales options de fread() sont les suivantes: Argument Valeur par défaut Fonction file Aucune Le chemin du fichier à importer sep Le caractère le plus fréquent parmi ,\\t |;: Le délimiteur du fichier header fread() essaie de deviner La première ligne contient-elle les noms de colonnes? nrows Inf Nombre maximum de lignes à importer (pas de limite par défaut) skip 0 Sauter les n premières lignes (0 par défaut) stringsAsFactors FALSE Les chaînes de caractères sont-elles traitées comme des facteurs? select NULL Sélectionner les colonnes à importer drop NULL Sélectionner les colonnes à ne pas importer colClasses fread() essaie de deviner Définir le type des variables encoding &quot;unknown&quot; Définir l’encodage du fichier (&quot;UTF-8&quot; ou &quot;Latin-1&quot;) dec Le point Définir le marqueur décimal data.table TRUE fread renvoie un data.table si TRUE, un data.frame si FALSE showProgress TRUE Indiquer la progression de l’importation Quelques remarques sur les options: l’option select doit être égale à un vecteur de noms. Exemple: select = c(&quot;var1&quot;, &quot;var2&quot;, &quot;var4&quot;); l’option colClasses doit égale à un vecteur dont chaque élément est de la forme nom_variable = &quot;type&quot;. Exemple: colClasses = c(var1 = &quot;character&quot;, var2 = &quot;logical&quot;, var4 = &quot;double&quot;); l’option stringsAsFactors = TRUE peut ralentir sensiblement l’importation des données; il faut l’utiliser avec circonspection. Exemple 1: on veut à nouveau importer le fichier des communes du code officiel géographique, en déclarant que le fichier est encodé en UTF-8 et en imposant que le code commune soit lu comme une chaîne de caractères et le code région comme un nombre entier. On écrit le code suivant: communes &lt;- fread(&quot;D:/K2KFED/communes-01012019.csv&quot;, colClasses = c(com = &quot;character&quot;, reg = &quot;integer&quot;), encoding = &quot;UTF-8&quot;) Exemple 2: on veut réaliser la même importation que précédemment, mais en sélectionnant uniquement le code commune, le nom de la commune et la région. On écrit le code suivant: communes &lt;- fread(&quot;D:/K2KFED/communes-01012019.csv&quot;, select = c(&quot;com&quot;, &quot;libelle&quot;, &quot;reg&quot;), colClasses = c(com = &quot;character&quot;, reg = &quot;integer&quot;), encoding = &quot;UTF-8&quot;) 4.4 Bonnes pratiques Voici quelques conseils à avoir en tête pour importer des données: Vérifier que votre machine peut charger les données: R importe les données dans la mémoire vive de la machine. Si les fichiers que vous voulez importer sont d’une taille supérieure à celle de la mémoire vive, vous ne pourrez pas les importer intégralement. Tester votre code d’importation avec quelques lignes: il faut souvent tâtonner pour bien importer des données. Il est donc recommandé de commencer par importer quelques centaines ou milliers de lignes (en utilisant l’option n_max des fonctions du package readr ou nrows de fread()) pour vérifier que le code est correct. Il est important d’importer un nombre réduit de colonnes. Bien sélectionner les colonnes permet souvent de réduire significativement la taille des données et de résoudre le problème mentionné au point précédent. Toutefois, seule la fonction fread() de data.table permet de sélectionner les colonnes (option select). Vous pouvez choisir le package que vous utilisez en fonction du format des données que vous souhaitez utiliser: les fonctions de readr renvoient un objet tibble tandis que fread() renvoie un objet data.table. Si vous prévoyez d’utiliser des packages du tidyverse (notamment tidyr et dplyr), il est préférable d’utiliser readr. Si vous prévoyez d’utiliser data.table, il est préférable d’utiliser fread(). Bien choisir le format des colonnes. 4.5 Ressources doc de fread doc de data.table éventuelle fiche sur les types de données en R. "],
["importer-des-données-depuis-sas-vers-r.html", "Chapter 5 Importer des données depuis SAS vers R 5.1 Tâches concernées et recommandations 5.2 Quelques détails sur les packages recommandés 5.3 Comment utiliser haven? 5.4 Comment procéder en deux temps? 5.5 Pour aller plus loin 5.6 Quelques conseils 5.7 Références", " Chapter 5 Importer des données depuis SAS vers R 5.1 Tâches concernées et recommandations L’utilisateur souhaite importer dans R des données stockées sous format SAS. ::: recommandation Recommandations de l’Insee Pour des données de taille petite ou moyenne (moins de 1 Go), l’usage de la fonction read_sas() du package haven est recommandé. Pour des fichiers de taille importante (plus de 1 Go), il est recommandé de procéder en deux temps: Exporter les données SAS en format .csv; Importer en R les données .csv. Il est déconseillé d’utiliser les packages suivants pour importer des données SAS : sas7dbat, foreign, Hmisc, SASxport. ::: 5.2 Quelques détails sur les packages recommandés 5.3 Comment utiliser haven? La fonction du package haven à utiliser se nomme read_sas() library(haven) # chargement d&#39;une table RP depuis le lecteur GEN - environ 20&quot; dfRP &lt;- read_sas(&quot;mon/chemin/de/dossier/tableSAS.sas7bdat&quot;) Options de read_sas() Sélectionner les colonnes parmi celles présentes dans la base SAS dfRP &lt;- read_sas(&quot;W:/A1090/GEN_A1090990_DINDISAS/RPADUDIF.sas7bdat&quot;, cols_only = c(&quot;NUMERO&quot;, &quot;ANAIX&quot;, &quot;DPNAIX&quot;)) Obtenir la liste des labels de colonne de la table importée avec haven library(sjlabelled) get_label(dfRP) encoding - Cet argument est à renseigner uniquement si l’importation des caractères accentués se passe mal. La valeur à indiquer dépend de la source. dfRP &lt;- read_sas(&quot;W:/A1090/GEN_A1090990_DINDISAS/RPADUDIF.sas7bdat&quot;, encoding = &quot;UTF-8&quot;) 5.4 Comment procéder en deux temps? Export depuis SAS: exemple de code options mprint mlogic notes; libname donnees &quot;W:/A1090/GEN_A1090990_DINDISAS/&quot;; PROC EXPORT DATA= donnees.RPADUDIF OUTFILE= &quot;U:/RP.csv&quot; DBMS=CSV REPLACE; PUTNAMES=YES; RUN; Renvoyer à la fiche import de fichiers plats. 5.5 Pour aller plus loin 5.6 Quelques conseils N’importer que les colonnes nécessaires. Les tables SAS compressées en BINARY ne sont pas prises en charge par le package haven. Il faut donc procéder en deux étapes (export en CSV puis import dans R) 5.7 Références doc de haven library(haven) ?read_sas "],
["fiches-de-documentation.html", "Chapter 6 Fiches de documentation 6.1 Manipuler des données (dplyr et data.table) 6.2 Créer ses propres fonctions 6.3 Ecrire des tables intermédiaires en R (fst) 6.4 Exporter des données (quels packages?) 6.5 Faire des graphiques (ggplot2) 6.6 Traiter des données textuelles (stringr et une introduction aux regex en R) 6.7 Utiliser un SGBD en R (DBI et autres drivers) 6.8 Réaliser des cartes 6.9 Rédiger des documents en R (Rmarkdown)", " Chapter 6 Fiches de documentation Commentaire OM: Chacune de ces titres aurait vocation à être une section à part entière, et non une sous-section. Je les laisse comme ça pour permettre une lecture facile du plan. 6.1 Manipuler des données (dplyr et data.table) 6.2 Créer ses propres fonctions Reprendre la partie 6 de la formation Travail collaboratif avec R. 6.3 Ecrire des tables intermédiaires en R (fst) 6.4 Exporter des données (quels packages?) 6.5 Faire des graphiques (ggplot2) 6.6 Traiter des données textuelles (stringr et une introduction aux regex en R) 6.7 Utiliser un SGBD en R (DBI et autres drivers) 6.8 Réaliser des cartes 6.8.1 Tâches concernées et recommandations L’utilisateur souhaite A COMPLETER. ::: recommandation Recommandations de l’Insee Pour faire des cartes, il est recommandé d’utiliser des outils cartographiques. ::: 6.8.2 Introduction à la cartographie avec R et sf/sp/le bon package 6.8.3 Bonnes pratiques 6.8.4 Ressources la doc des packages; les supports de formation à l’Insee; les supports de formation externes; les bons sites ressources (tutoriels, galeries, forums…) 6.9 Rédiger des documents en R (Rmarkdown) "]
]
